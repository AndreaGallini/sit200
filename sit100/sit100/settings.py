"""
Django settings for sit100 project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key

load_dotenv()

ENVIRONMENT = os.getenv('ENVIRONMENT', 'production')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', get_random_secret_key())

# def remove_quotes(s):
#    return s.replace("'", "")


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = remove_quotes(os.environ.get('DEBUG'))
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = ['127.0.0.1', 'localhost',
                 'sit100-dev-5t9x9.ondigitalocean.app', 'www.kwh91.com']
AUTHENTICATION_BACKENDS = [
    'apps.core.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django_extensions',
    'django.contrib.staticfiles',
    'django_user_agents',
    'apps.core',
    'apps.frontend',
    'apps.user_profile',
    'apps.project',
    'apps.legal',
    'apps.project_setup',
    'apps.project_pipeline',
    'apps.api_integrations',
    'apps.project_result',
    'apps.project_archive',
    'apps.documentation',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]
# settings.py

ROOT_URLCONF = 'sit100.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates', os.path.join(BASE_DIR, 'shared_templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'sit100.context_processors.session_data',
                'sit100.context_processors.app_settings',
                'sit100.context_processors.project_common_data',
                'sit100.context_processors.project_specialized_data',
            ],
        },
    },
]

WSGI_APPLICATION = 'sit100.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {
    'default': dj_database_url.parse(
        os.getenv('DATABASE_URL'),
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'it-it'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
if not os.path.exists(STATIC_ROOT):
    os.makedirs(STATIC_ROOT)
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_MIMETYPES = {
    '.css': 'text/css',
    '.js': 'application/javascript'
}
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['css']  # Se vuoi disabilitare la compressione


# Aggiungi filtro per escludere input.css

class IgnoreInputCSSFinder:

    def find(self, path, all=False):

        if 'input.css' in path:

            return []

        return super().find(path, all)

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = os.getenv('MEDIA_URL')
MEDIA_ROOT = os.getenv('MEDIA_ROOT')
PROJECT_URL = os.getenv('PROJECT_URL')
PROJECT_ROOT = os.getenv('PROJECT_ROOT')
USER_URL = os.getenv('USER_URL')
USER_ROOT = os.getenv('USER_ROOT')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = '/dashboard'

EMAIL_BACKEND = 'apps.core.custom_email_backend.SSLNotVerifyingEmailBackend'
EMAIL_HOST = 'mx3.vhostingcloud.com'
EMAIL_PORT = 465
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

""" EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = 'mailserver4.vhosting-it.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'noreply-dev@numeraway.com'
EMAIL_HOST_PASSWORD = 'x*7sPaWD29j$Sra=' """


SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 weeks
# Opzionale: termina la sessione alla chiusura
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


LOG_DIR = os.path.join(BASE_DIR, 'logs')
LOG_LEVEL = os.getenv("LOG_LEVEL", "WARNING").upper()  # Default: WARNING
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # === FORMATTERS ===
    'formatters': {
        'simpleRe': {
            'format': '%(asctime)s - %(levelname)s - %(message)s',
        },
        'verbose': {
            'format': '{asctime} - {levelname} - {module} - {process:d} - {thread:d} - {message}',
            'style': '{',
        },
    },

    # === HANDLERS ===
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'simpleRe',
        },
        'file': {
            'level': 'WARNING',  # Salva WARNING e superiori su file
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'django.log'),
            'formatter': 'verbose',
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 5,  # Mantiene 5 file di backup
        },
    },

    # === LOGGERS ===
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {  # Per errori specifici delle richieste HTTP
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
        },
    }
}

# This version number follows semantic versioning (major.minor.patch)
VERSION = 'prototipo 1.0.0'
APP_NAME = 'kWh91'
APP_DARK_LOGO = 'logo_dark.svg'
APP_LIGHT_LOGO = 'logo_light.svg'

REQUIRED = ['project_title', 'address', 'municipality', 'province', 'region']
